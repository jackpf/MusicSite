<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Sonata\UserBundle\Entity\BaseUser as BaseUser;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class User extends BaseUser
{
    /**
     * @var int
     */
    protected $id;

    /**
     * @var \Doctrine\Common\Collections\ArrayCollection
     */
    protected $orders;

    /**
     * @var \Doctrine\Common\Collections\ArrayCollection
     */
    protected $favourites;

    public function __construct()
    {
        $this->favourites = new ArrayCollection();
        $this->orders = new ArrayCollection();
    }

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return mixed
     */
    public function getOrders()
    {
        return $this->orders;
    }

    /**
     * @param mixed $orders
     */
    public function setOrders($orders)
    {
        $this->orders = $orders;
    }

    /**
     * @return mixed
     */
    public function getFavourites()
    {
        return $this->favourites;
    }

    /**
     * @param mixed $favourites
     */
    public function setFavourites($favourites)
    {
        $this->favourites = $favourites;
    }

    /**
     * @param mixed $favourites
     */
    public function addFavourite($favourite)
    {
        $this->favourites->add($favourite);
    }

    /**
     * @param mixed $favourites
     */
    public function removeFavourite($favourite)
    {
        $this->favourites->removeElement($favourite);
    }

    /**
     * @param $favouriteToFind
     * @return bool
     */
    public function hasFavourite($favouriteToFind)
    {
        foreach ($this->getFavourites() as $favourite) {
            if ($favourite->getId() == $favouriteToFind->getId()) {
                return true;
            }
        }

        return false;
    }
}